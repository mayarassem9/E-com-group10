// Constants and Globals
const sectionProducts = document.querySelector(".sectionContainer");
let displayedBooks = 0;
const pageSize = 12;
let allBooksData = [];
const myTabContent = document.getElementById("myTabContent");
const viewMoreButton = document.getElementById("viewmorebtn");
const searchInput = document.getElementById("searchInput");
const searchButton = document.getElementById("searchButton");
const row = document.createElement("DIV");

// Initialization
document.addEventListener('DOMContentLoaded', () => {
    createSearchAndTabs();
    getBooks();
});

// UI Creation Functions

// Creates the search bar and tabs
function createSearchAndTabs() {
    createSearchBar(sectionProducts);
    createTabs(sectionProducts);
}

// Creates the search bar
function createSearchBar(parentElement) {
    const rowDiv = document.createElement('div');
    rowDiv.classList.add('row', 'my-3');

    const customDiv = document.createElement('div');
    customDiv.classList.add('col-md-6', 'offset-md-3');

    const form = document.createElement('form');
    form.classList.add('d-flex');

    const input = document.createElement('input');
    input.classList.add('form-control', 'me-2');
    input.setAttribute('type', 'search');
    input.setAttribute('id', 'searchInput');
    input.setAttribute('placeholder', 'Search');
    input.setAttribute('aria-label', 'Search');

    const button = document.createElement('button');
    button.classList.add('btn', 'btn-outline-dark');
    button.setAttribute('type', 'button');
    button.setAttribute('id', 'searchButton');
    button.innerHTML = '<i class="fas fa-search"></i>';

    form.appendChild(input);
    form.appendChild(button);
    customDiv.appendChild(form);
    rowDiv.appendChild(customDiv);
    parentElement.appendChild(rowDiv);
}

// Creates the tab structure
function createTabs(parentElement) {
    const ul = document.createElement('ul');
    ul.classList.add('nav', 'nav-tabs');
    ul.setAttribute('id', 'myTab');

    const tabData = [
        { id: 'allBooks', iconClass: 'fas fa-book pr-3', text: 'All Books', active: true },
        { id: 'bestSeller', iconClass: 'fas fa-fire pr-3', text: 'Best Seller', active: false },
        { id: 'recentlyAdded', iconClass: 'fas fa-clock pr-3', text: 'Recently Added', active: false },
        { id: 'category', iconClass: 'fas fa-list pr-3', text: 'Categories', active: false }
    ];

    tabData.forEach(tab => {
        const li = document.createElement('li');
        li.classList.add('nav-item');

        const button = document.createElement('button');
        button.classList.add('nav-link');
        button.setAttribute('id', `${tab.id}-tab`);
        button.setAttribute('data-toggle', 'tab');
        button.setAttribute('data-target', `#${tab.id}`);
        button.setAttribute('type', 'button');
        button.setAttribute('role', 'tab');
        button.setAttribute('aria-controls', tab.id);
        button.setAttribute('aria-selected', tab.active ? 'true' : 'false');

        if (tab.active) {
            button.classList.add('active');
        }

        button.innerHTML = `<i class="${tab.iconClass}"></i>${tab.text}`;

        li.appendChild(button);
        ul.appendChild(li);
    });

    parentElement.appendChild(ul);
}

// Data Handling Functions

// Fetches books from local storage or server
function getBooks() {
    const storedBooks = getBooksFromLocalStorage();
    if (storedBooks.length > 0) {
        allBooksData = storedBooks;
        AddBookstoDom(allBooksData);
    } else {
        fetch("Data/productData.json")
            .then(res => res.text())
            .then(data => JSON.parse(data))
            .then(data => {
                allBooksData = data.books;
                saveBooksToLocalStorage(allBooksData);
                AddBookstoDom(allBooksData);
            })
            .catch(err => console.log(err));
    }
}

// Adds books to the DOM
function AddBookstoDom(books) {
    const remainingBooks = books.slice(displayedBooks, displayedBooks + pageSize);
    if (remainingBooks.length === 0) {
        viewMoreButton.disabled = true;
        return;
    }
    remainingBooks.forEach(book => {
        const bookCard = createBookCard(book);
        row.appendChild(bookCard);
    });
    displayedBooks += remainingBooks.length;
    container.append(row);
    if (displayedBooks >= books.length) {
        viewMoreButton.disabled = true;
    }
}

// Filters books based on the search term
function filterBooks(searchTerm) {
    displayedBooks = 0;
    row.innerHTML = '';

    const filteredBooks = allBooksData.filter(book =>
        book.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        book.author.toLowerCase().includes(searchTerm.toLowerCase()) ||
        book.description.toLowerCase().includes(searchTerm.toLowerCase())
    );

    AddBookstoDom(filteredBooks);
}

// Event Handling Functions

// Handles tab selection
function handleTabSelection(event) {
    const tabId = event.target.getAttribute('data-target').substring(1);
    updateDisplayedBooks(tabId);
}

// Handles search functionality
function handleSearch() {
    const searchTerm = searchInput.value.trim();
    if (searchTerm !== '') {
        filterBooks(searchTerm);
    } else {
        const activeTab = ul.querySelector('.active');
        if (activeTab) {
            const tabId = activeTab.getAttribute('data-target').substring(1);
            updateDisplayedBooks(tabId);
        }
    }
}

// Handles view more button click
function handleViewMore() {
    getBooks();
}

// Event Listeners
ul.addEventListener('click', handleTabSelection);
searchButton.addEventListener('click', handleSearch);
searchInput.addEventListener('keyup', event => {
    if (event.key === 'Enter') handleSearch();
});
viewMoreButton.addEventListener('click', handleViewMore);
document.addEventListener('DOMContentLoaded', getBooks);